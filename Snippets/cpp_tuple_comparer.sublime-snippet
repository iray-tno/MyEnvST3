<!-- Combination -->
<snippet>
<content><![CDATA[
/* Usage:
  vector<tuple<int,string>> tuples;
  tuples.push_back(make_tuple(0,"a"));
  tuples.push_back(make_tuple(2,"c"));
  tuples.push_back(make_tuple(1,"b"));

  sort(tuples.begin(), tuples.end(),TupleComparer<0>()); //"a","b","c"

  sort(tuples.rbegin(), tuples.rend(),TupleComparer<0>());  //"c","b","a"
  sort(tuples.begin(), tuples.end(),TupleComparer<0,greater>());  //"c","b","a"

*/

#include <tuple>

template<int Index, template<typename> class F = std::less>
struct TupleComparer{
  template<typename T>
  bool operator()(T const &t1, T const &t2){
    return F<typename std::tuple_element<Index, T>::type>()(std::get<Index>(t1), std::get<Index>(t2));
  }
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>lib-tuple_comparer</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
